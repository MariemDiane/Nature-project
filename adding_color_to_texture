#!/usr/bin/env python
# coding: utf-8

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 22 15:32:55 2022

@author: mariemdiane
"""

# importing Image class from PIL package
import glob
import scipy
import skimage
import matplotlib.pyplot as plt
from scipy import fft
from skimage import data, color
import numpy as np        
import skimage
import os
import cv2
from skimage import io
from natsort import natsorted
from tqdm import tqdm
import numpy as np
from scipy import ndimage
from PIL import Image, ImageOps
import time


# opening a multiband image (RGB specifically)
im = Image.open(r"/Users/mariemdiane/Documents/image_fall.png")
plt.imshow(im)


# split() method: this will split the image in individual bands and return a tuple
im1 = Image.Image.split(im)
  
# showing each band
im1[0].show()
im1[1].show()
im1[2].show()

# j'ai renommé chaque image split imA, imB, imC


# In[ ]:


img = Image.open(r"/Users/mariemdiane/Desktop/imA.png")

# D'abord resize en square
img = img.resize((1440,1440))
plt.imshow(img)


# On fait la texture fft sur cette image

F2D = fft.rfft2(img, s=None, norm=None)
phase = 2 * np.pi * np.random.rand(F2D.shape[0], F2D.shape[1])
F_random = np.exp(1j * phase)
Fz_scrambled = F_random * F2D
image_phase = fft.irfft2(Fz_scrambled)
plt.imshow(image_phase);

# OK, on fait pareil sur les deux autres



# Numéro 2
img = Image.open(r"/Users/mariemdiane/Desktop/imB.png")

# D'abord resize en square
img = img.resize((1440,1440))
plt.imshow(img)

# On fait la texture fft sur cette image

F2D = fft.rfft2(img, s=None, norm=None)
phase = 2 * np.pi * np.random.rand(F2D.shape[0], F2D.shape[1])
F_random = np.exp(1j * phase)
Fz_scrambled = F_random * F2D
image_phase2 = fft.irfft2(Fz_scrambled)
plt.imshow(image_phase2);



# Numéro 3
img = Image.open(r"/Users/mariemdiane/Desktop/imC.png")

# D'abord resize en square
img = img.resize((1440,1440))
plt.imshow(img)


# On fait la texture fft sur cette image

F2D = fft.rfft2(img, s=None, norm=None)
phase = 2 * np.pi * np.random.rand(F2D.shape[0], F2D.shape[1])
F_random = np.exp(1j * phase)
Fz_scrambled = F_random * F2D
image_phase3 = fft.irfft2(Fz_scrambled)
plt.imshow(image_phase3);


# On stack les numpy arrays des 3 image_phase

R, G, B = image_phase, image_phase2, image_phase3

for image in R, G, B:
    image -= image.mean()
    image /= image.std()
    
np.dstack((R, G, B)).shape

img_stacked = np.dstack((R, G, B))
img_stacked = (img_stacked - img_stacked.min() / (img_stacked.max() - img_stacked.min()
                                                  
img_stacked.shape
plt.imshow(img_stacked)

